package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"go-gql-app/dbmodels"
	"go-gql-app/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &dbmodels.UserDB{
		Name:     input.Email,
		Email:    input.Email,
		Password: input.Password,
	}
	if err := r.DB.Table("users").Create(user).Error; err != nil {
		return nil, err
	}
	return &model.User{
        ID:    string(user.ID),
        Name:  user.Name,
        Email: user.Email,
        // Don't send password
    }, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input *model.NewProduct) (*model.Product, error) {
	product := &model.Product{
		Name:        input.Name,
		Description: input.Description,
		Price:       input.Price,
	}

	if err := r.DB.Create(product).Error; err != nil {
		return nil, err
	}
	return product, nil
}

//	if err := r.DB.Create(order).Error; err != nil {
//												return nil, err
//											}
//											return order, nil
//										}
//
// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	r.DB.Table("users").Find(&users)
	return users, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	var products []*model.Product
	r.DB.Table("products").Find(&products)
	return products, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
